:PROPERTIES:
:ID:       8ce01dea-49da-4116-b246-f41ac7e2e9e6
:END:
#+TITLE: configuration
#+AUTHOR: Mark Ebeid

# `load!' for loading external *.el files relative to this one
# `use-package!' for configuring packages
# `after!' for running code after a package has loaded
# `add-load-path!' for adding directories to the `load-path', relative to
# this file. Emacs searches the `load-path' when you load packages with
# `require' or `use-package'.
# `map!' for binding new keys

# To get information about any of these functions/macros, move the cursor over
# the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
# This will open documentation for it, including demos of how they are used.

# You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
# they are implemented.

* Identifying Information & Themes
#+begin_src elisp
;; identifying information
(setq user-full-name "Mark Ebeid"
      user-mail-address "mebeid1@umbc.edu"
      fancy-splash-image (file-truename "~/Cache/Sync/org/emacs-banner.png")
      doom-theme 'doom-gruvbox
      display-line-numbers-type t
      display-line-numbers-type 'relative
      doom-unicode-font (font-spec :family "Julia Mono" :size 12 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; headline size
(custom-set-faces
 '(org-level-1 ((t (:inherit outline-1 :height 2.1))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.8))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.5))))
 '(org-level-4 ((t (:inherit outline-4 :height 1.3))))
 '(org-level-5 ((t (:inherit outline-5 :height 1.0)))))
#+end_src
#+RESULTS:

* Setting Directories
#+begin_src elisp
(setq org-directory (file-truename "~/Cache/Sync/org/")
      org-roam-directory (file-truename "~/Cache/Sync/org/")
      org-roam-dailies-directory (file-truename "~/Cache/Sync/org/daily/"))
#+end_src

#+RESULTS:
: /home/moo/Cache/Sync/org/daily/

* All Things Org
** Org Variables
#+begin_src elisp
(setq projectile-project-search-path '(org-directory org-roam-directory org-roam-dailies-directory))
(setq org-agenda-files '("~/Cache/Sync/org/inbox.org"
                         "~/Cache/Sync/org/academics/graduate/research/aims/aims.org"
                         "~/Cache/Sync/org/academics/graduate/research/dennis/dennis.org"
                         "~/Cache/Sync/org/academics/graduate/research/idrp.org"
                         "~/Cache/Sync/org/academics/graduate/bioZone/bioZone.org"
                         "~/Cache/Sync/org/life/finances/finances.org"
                         "~/Cache/Sync/org/life/mental/mental.org"
                         "~/Cache/Sync/org/life/health/health.org"
                         "~/Cache/Sync/org/academics/graduate/research/benos.org"
                         "~/Cache/Sync/org/academics/graduate/research/akira/akira.org"
                         "~/Cache/Sync/org/academics/graduate/courses/evolutionary-biology/evolutionary-biology.org"
                         "~/Cache/Sync/org/life/professional/software/emacs.org"
                         "~/Cache/Sync/org/academics/graduate/courses/metaschool/metaschool.org"
                         "~/Cache/Sync/org/academics/graduate/research/jason/schema/schema.org"))
(after! org
 (setq org-startup-folded t
       org-log-done 'time
       org-agenda-span 7
       org-modules '(ol-bibtex org-habit)
       org-startup-with-inline-images t
       org-startup-with-latex-preview t
       org-preview-latex-default-process 'dvipng
       org-deadline-warning-days 7
       org-deadline-past-days 7
       org-image-actual-width nil
       org-pomodoro-length 30
       org-pomodoro-short-break-length 10
       org-pomodoro-long-break-length 15
       ;org-pomodoro-manual-break t

       org-priority-highest ?A
       org-priority-lowest ?F
       org-priority-default ?A
       org-priority-faces '((?A . 'all-the-icons-red)
                            (?B . 'all-the-icons-orange)
                            (?C . 'all-the-icons-lorange)
                            (?D . 'all-the-icons-yellow)
                            (?E . 'all-the-icons-lyellow)
                            (?F . 'all-the-icons-silver))))
#+end_src

#+RESULTS:
| 65 | quote | all-the-icons-red     |
| 66 | quote | all-the-icons-orange  |
| 67 | quote | all-the-icons-lorange |
| 68 | quote | all-the-icons-yellow  |
| 69 | quote | all-the-icons-lyellow |
| 70 | quote | all-the-icons-silver  |

** Package Configuration
 #+begin_src elisp
 (use-package! websocket
  :after org-roam)

 (use-package! org-roam-ui
  :after org-roam ;; or :after org
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

 (use-package! org-super-agenda
  :after org-agenda
  :config
  (org-super-agenda-mode)
  (setq org-super-agenda-groups '((:name "PROPOSAL" :file-path "aims.org")
                                  (:name "DENNIS" :file-path "dennis.org")
                                  (:name "IDRP" :file-path "idrp.org")
                                  (:name "BIOZONE" :file-path "bioZone.org")
                                  (:name "FINANCES" :file-path "finances.org")
                                  (:name "MENTAL" :file-path "mental.org")
                                  (:name "HEALTH" :file-path "health.org")
                                  (:name "BENOS" :file-path "benos.org")
                                  (:name "EVOLBIO" :file-path "evolutionary-biology.org")
                                  (:name "EMACS" :file-path "emacs.org")
                                  (:name "AKIRA" :file-path "akira.org")
                                  (:name "METASCHOOL" :file-path "metaschool.org")
                                  (:name "METASCHOOL" :file-path "schema.org"))))

(use-package! org-fancy-priorities
  :ensure t
  :hook
  (org-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list '((?A . "1")
                                   (?B . "2")
                                   (?C . "3")
                                   (?D . "4")
                                   (?E . "5")
                                   (?F . "6"))))
 #+end_src

* Tangling =packages.el=
#+begin_src elisp :tangle packages.el

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")

;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)

(package! evil-snipe)
(package! evil-collection)
(package! evil-surround)
(package! org-fancy-priorities)
(package! org-super-agenda)
(package! bibtex-completion)
(package! org-roam-ui)
(package! ox-pandoc)
(package! simpleclip)
(package! xclip)
(package! org-download)
(package! ssh)
(package! org-pomodoro)
#+end_src

* =.els from elsehwere=
#+begin_src elisp
(load! "/home/moo/.doom.d/org-pomodoro-third-time/org-pomodoro-third-time.el")
#+end_src
